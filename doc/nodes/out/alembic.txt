#type: node
#context: out
#internal: alembic
#icon: SOP/alembic

= Alembic =

The Alembic ROP can export your scene as an Alembic archive.
See the following link for further information about the [Alembic format|http://code.google.com/p/alembic/].

NOTE:
    This is a preliminary exporter. A more full featured exporter will be included in the future. The future version will likely be SOHO based. 

@parameters

Render:
        Begins the render with the last render control settings.

Render Control:
        Opens the render control dialog to allow adjustments of the render parameters before rendering.

Valid Frame Range:
        Controls whether this render node outputs the current frame (__Render any frame__) or the image sequence specified in the __Start/End/Inc__ parameters (__Render Frame Range__).

        __Render Frame Range (strict)__ will render frames START to END when it is rendered, but will not allow frames outside this range to be rendered at all. __Render Frame Range__ will allow outside frames to be rendered. This is used in conjunction with render dependencies. It also affects the behavior of the 'Override Frame Range' in the Render Control dialog.

        Two possible cases where you'd want the strict behavior:
        
        - A 60 frame walk cycle written out to a geo, but part of a larger ROP net to render out a larger frame range.
        
        - A texture loop from 1-20.
        
        Otherwise, you will usually set this to non-strict.

        Render Any Frame: 
                Renders a single frame, based on the value in the playbar or the frame that is requested by a connected output render node.

        Render Frame Range:
                Renders a sequence of frames. If an output render node is connected, this range is generally ignored in favor of frames requested by the output render node.
    
        Render Frame Range (Strict):
                Renders a sequence of frames. If an output render node is connected, this range restricts its requested frames to this frame range.

Start/End/Inc:
        Specifies the range of frames to render (start frame, end frame, and increment). All values may be floating point values. The range is inclusive. 

        These parameters determine the values of the local variables for the output driver.
                `$NRENDER`:
                        The number of frames to be rendered by the output driver.
                `$N`:
                        The current frame being rendered (starting at 1 and going to `$NRENDER`).
        
        For example, if the parameters are set to:
        table>>
                tr>>
                        th>> Start
                        th>> End
                        th>> Inc
                tr>> 
                        td>> 10.5
                        td>> 12
                        td>> 0.5

        There will be 4 frames rendered (10.5, 11, 11.5, and 12), so `$NRENDER` will have a value of 4. `$N` will have the value:
        table>>
                tr>>
                            th>> Frame
                            th>> 10.5
                            th>> 11
                            th>> 11.5
                            th>> 12
                tr>> 
                            td>> $N
                            td>> 1
                            td>> 2
                            td>> 3
                            td>> 4

Render With Take:
        The output driver will switch to this take before rendering and then restore the current take when rendering is done.

        TIP:
                Use `chs("take")` to use this value in other parameters. See the [Exp:chs] expression function for more information.

Alembic File:
        The name of the archive to generate.

[Include:standard#mkpath]

Root Object:
        The root object of the scene. All displayed objects contained under this node will be included in the Alembic archive.

Objects:
        A pattern/bundle of objects to include in the alembic archive.
    
        NOTE:
                Only objects that are displayed on the start frame will be output to the archive.

Collapse identity transforms:
        This option will skip writing any transform nodes which have no transform
        (an identity transform) for the entire animation.
        
        When importing an Alembic scene, there are often empty geometry nodes
        created to contain [Alembic SOPs|Node:sop/alembic]. These objects are simply
        placeholders to contain the geometry. However, when exporting the
        scene, they will be added as dummy transform nodes (roughly doubling
        the size of the Alembic archive node count).

Full Bounding Box Tree:
        This will cause all Alembic nodes to have proper bounding boxes written.
        Computing bounds for only the shape nodes is more efficient.

Save Attributes:
        If this checkbox is turned on, geometry attributes will be saved to the
        Alembic file as arbitrary geometry parameters.

Face Sets:
        This parameter controls how Houdini primitive groups will be translated to
        Alembic face sets.  Alembic only supports face sets for polygon and
        subdivision meshes.

        No Face Sets:
        	No face sets will be saved out.
        Save Non-Empty Groups As Face Sets:
        	Only groups which contain polygons will generate face sets in
        	the Alembic file.
        Save All Groups As Face Sets:
        	Face sets will be created for all groups, regardless of whether
        	the group contains any polygons.

Subdivision Group:
	If a group name is specified here, any polygons in any objects will be
	saved as subdivision primitives in the Alembic file.  Other polygons
	will be saved as polygon mesh nodes.

	If no group is specified on the output driver, object level parameters
	will be used to control whether polygons are output as subdivision or
	polygon mesh primitives.  Enabling the `vm_rendersubd` or
	`ri_rendersubd` will cause polygons to be saved as subdivision
	primitives.  If specified, the `vm_subdgroup` will be used to select
	which polygons will be rendered as subdivision surfaces.

Partition Mode:
        When saving a complex piece of geometry, it is possible to partition the
        geometry into multiple shape nodes by splitting up the primitives based on
        a string attribute.  There are several different ways to interpret the
        string values:

	No Geometry Partitioning:
		The geometry will be output as a single Alembic shape node.
	Use Attribute Value:
		The value of the string attribute is used to name the shape
		node.  This mode is ideal when using the `name` attribute.
	Use Shape Node Component Of Path Attribute Value:
		When loading an Alembic file, you can store the Alembic path in
		a string attribute.  This option will partition the geometry
		based on the names of the shape nodes stored in the attribute.
	Use Transform Node Component Of Path Attribute Value:
		This option will partition the geometry based on the names of
		the transform nodes stored in the attribute.
	Use Combination Of Transform/Shape Node:
		Combines both the transform and shape node names to form the
		name for the new shape node.

Partition Attribute:
        Specifies a string attribute which is used to partition a single geometry
        into multiple Alembic shape nodes. For example, you can use the `name` or
        the `abcPath` attribute to split a single piece of Houdini geometry into
        different Alembic shape nodes based on the string value.

Verbosity:
        Add information to the Alembic ROP based on objects written to the archive.

Use Motion Blur:
        Enabling this will cause sub-frame geometry to be saved to the Alembic file.

Samples:
        The number of sub-frame motion samples to be saved.

Shutter:
        The open/close of the shutter for sub-frame motion samples.
