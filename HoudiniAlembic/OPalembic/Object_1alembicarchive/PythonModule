import string
import time
import _alembic_hom_extensions as _abc
try:
    from hou import ui
except:
    ui = None

_AbcModule = '__import__("_alembic_hom_extensions")'

def BuildHierarchyRoot(rootNode):
    #For now delete the existing children.
    for child in rootNode.children():
        child.destroy()

    fileName = rootNode.evalParm('fileName')
    if not fileName:
        if ui:
            ui.displayMessage(title='No Filename',
                text='Please enter an Alembic file to load.',
                severity=hou.severityType.Warning)
        else:
            print 'No filename entered for Alembic scene.'
        return

    buildSubnet = rootNode.evalParm('buildSubnet')

    tree = _abc.alembicGetSceneHierarchy(fileName, "")
    channelRefs = rootNode.evalParm('channelRef')

    pathList = [x for x in rootNode.evalParm('objectPath').strip('/').split('/') if x]

    for entry in tree[2]:
        WalkHierarchy(fileName,
                        rootNode,
                        rootNode,
                        '',
                        entry,
                        pathList,
                        buildSubnet,
                        channelRefs)
    rootNode.layoutChildren()
    if not channelRefs:
        PushParametersToChildren(rootNode)

_primitiveTypes = frozenset((
    'polymesh',
    'subdmesh',
    'curves',
    'nupatch',
    'points',
))

_sanitizeTable = None

def _sanitizeName(name):
    def valid(i):
        ch = chr(i)
        if ch.isalnum():
            return ch
        return '_'
    global _sanitizeTable
    if not _sanitizeTable:
        letters = ''.join([string.letters, string.digits, '_'])
        # Full alphabet
        alpha = ''.join(map(chr, range(256)))
        xlate = ''.join(map(valid, range(256)))
        _sanitizeTable = string.maketrans(alpha, xlate)
    name = string.translate(name, _sanitizeTable)
    if name[0].isdigit():
        name = '_' + name
    return name

def _setParmValue(node, parmname, value):
    parm = node.parm(parmname)
    if parm:
        parm.set(value)

def _setNodeName(node, name):
    try:
        node.setName(name, True)
    except:
        node.setName(_sanitizeName(name), True)

def _setVisibility(node, filename, objectpath):
    vis = _abc.alembicVisibility(filename, objectpath, 0)
    if not vis[1] and vis[0] != -1:
        # Animated visibility
        _setParmValue(node, 'tdisplay', 1)
        disp = node.parm('display')
        disp.setExpression(
                '%s.alembicVisibility(ch("fileName"), "%s", ch("frame")/ch("fps"))[0] != 0' % (_AbcModule, objectpath),
                hou.exprLanguage.Python)
        return True
    elif vis[0] == 0:
        _setParmValue(node, 'tdisplay', 1)
        _setParmValue(node, 'display', 0)
    return False

def ExpressionToParm(srcParm, dstParm, isString=False):
    relPath = dstParm.node().relativePathTo(srcParm.node())
    dstParm.setExpression('ch%s("%s/%s")' % (
            bool(isString)*'s', relPath, srcParm.name()),
            hou.exprLanguage.Hscript)

def _setupAbcGeo(geo, issubd):
    # We've just created an empty geometry node, we need to add the
    # properties we want.
    # Add mantra default properties
    parms = ','.join([
            'categories',
            'reflectmask',
            'refractmask',
            'lightmask',
            '*rendersubd*',
            'shop_geometrypath'])
    hou.hscript('opproperty -f -F Render %s mantra,prman* %s' % (geo.path(), parms))

def WalkHierarchy(fileName, rootNode, parentNode, parentPath, childEntry,
                pathList, buildSubnet, channelRefs):
    name, typeName, children = childEntry
    if pathList:
        if pathList[0] != name:
            return
        pathList = pathList[1:]

    currentPath = parentPath + '/' + name
    if typeName in _primitiveTypes:
        currentNode = parentNode.createNode('geo', run_init_scripts=False)
        subd = (typeName == 'subdmesh')
        _setupAbcGeo(currentNode, subd)
        currentNode.setInput(0, parentNode.indirectInputs()[0])
        if subd:
            for parmname in ('vm_rendersubd', 'ri_rendersubd'):
                _setParmValue(currentNode, parmname, 1)
        _setNodeName(currentNode, name)

        sopNode = currentNode.createNode('alembic')
        _setNodeName(sopNode, name)

        relPath = sopNode.relativePathTo(rootNode)
        hou.hscript("opmultiparm %s 'abcName#' '%s/abcName#' 'hName#' '%s/hName#'" % (
                sopNode.path(), relPath, relPath))

        _setParmValue(sopNode, "addpath", 0)
        if channelRefs:
            ExpressionToParm(rootNode.parm('remapAttributes'),
                sopNode.parm('remapAttributes'),
                isString=True)
            ExpressionToParm(rootNode.parm('fileName'),
                sopNode.parm('fileName'),
                isString=True)
            ExpressionToParm(rootNode.parm('frame'), sopNode.parm('frame'))
            ExpressionToParm(rootNode.parm('fps'), sopNode.parm('fps'))
            ExpressionToParm(rootNode.parm('loadmode'), sopNode.parm('loadmode'))

        objectPath = currentPath
        if ' ' in objectPath:
            objectPath = ''.join(['"', currentPath, '"'])
        sopNode.parm('objectPath').set(objectPath)
        sopNode.parm('includeXform').set(0)
        sopNode.parm('usevisibility').set(0)
        sopNode.parm('groupnames').set('none')  # Don't build groups
    elif typeName == 'xform' or typeName == 'cxform':
        if buildSubnet:
            currentNode = parentNode.createNode('alembicxform')
            currentNode.setInput(0, parentNode.indirectInputs()[0])
        else:
            currentNode = rootNode.createNode('alembicxform')
            if currentNode.parent() == parentNode.parent():
                currentNode.setInput(0, parentNode)
            else:
                currentNode.setInput(0, parentNode.indirectInputs()[0])
        _setNodeName(currentNode, name)
        animated = typeName != 'cxform'
        if _setVisibility(currentNode, fileName, currentPath):
            animated = True

        if channelRefs:
            ExpressionToParm(rootNode.parm('fileName'),
                    currentNode.parm('fileName'),
                    isString=True)
            if animated:
                ExpressionToParm(rootNode.parm('frame'),
                        currentNode.parm('frame'))
                ExpressionToParm(rootNode.parm('fps'),
                        currentNode.parm('fps'))

        currentNode.parm('objectPath').set(currentPath)
        if not animated:
            currentNode.parm('abcConstant').set(1)

        for entry in children:
            WalkHierarchy(fileName, rootNode, currentNode, currentPath,
                        entry, pathList, buildSubnet, channelRefs)
        currentNode.layoutChildren()
    elif typeName == 'camera':
        currentNode = parentNode.createNode('cam')
        currentNode.setInput(0, parentNode.indirectInputs()[0])
        _setNodeName(currentNode, name)
        currentNode.addSpareParmTuple(rootNode.parm('fileName').parmTemplate(),
                ('Alembic',), True)
        currentNode.addSpareParmTuple(rootNode.parm('frame').parmTemplate(),
                ('Alembic',), True)
        currentNode.addSpareParmTuple(rootNode.parm('fps').parmTemplate(),
                ('Alembic',), True)

        if channelRefs:
            ExpressionToParm(rootNode.parm('fileName'),
                    currentNode.parm('fileName'),
                    isString=True)
            ExpressionToParm(rootNode.parm('frame'), currentNode.parm('frame'))
            ExpressionToParm(rootNode.parm('fps'), currentNode.parm('fps'))

        def camChannel(parmName):
            return '%s.alembicGetCameraDict(ch("fileName"), "%s", ch("frame")/ch("fps")).get("%s")' % (_AbcModule, currentPath, parmName)

        def camAperture():
            # This fixes the inconsistency of Maya's camera aperture
            return '%s*max(1,(ch("resx")/ch("resy")*ch("aspect"))*3./4)' % camChannel('aperture')

        for parmName in (
                'focal',
                'near',
                'far',
                'focus',
                'winx',
                'winy',
                'winsizex',
                'winsizey'):
             currentNode.parm(parmName).setExpression(camChannel(parmName), hou.exprLanguage.Python)
        currentNode.parm('aperture').setExpression(camAperture(), hou.exprLanguage.Python)
    else:
        return

def PushParametersToChildren(rootNode):
    now = time.time()
    WalkAndPush(rootNode, rootNode)

def _pushStringParm(name, fnode, tnode):
    tparm = tnode.parm(name)
    if tparm:
        fparm = fnode.parm(name)
        tparm.set(fparm.unexpandedString())

def _pushScalarParm(name, fnode, tnode):
    tparm = tnode.parm(name)
    if tparm:
        fparm = fnode.parm(name)
        try:
            expr = fparm.expression()
            tparm.setExpression(expr)
        except:
            tparm.deleteAllKeyframes()
            tparm.set(fparm.eval())

def _pushRemapAttributesParm(fnode, tnode):
    tparm = tnode.parm('remapAttributes')
    if tparm:
        fparm = fnode.parm('remapAttributes')
        nparms = fparm.eval()
        tparm.set(nparms)
        for i in range(nparms):
            _pushStringParm('abcName%d' % (i+1), fnode, tnode)
            _pushStringParm('hName%d' % (i+1), fnode, tnode)

def WalkAndPush(rootNode, parentNode):
    for kid in parentNode.children():
        _pushStringParm('fileName', rootNode, kid)
        cxform = kid.parm('abcConstant')
        if not cxform or not cxform.eval():
            _pushScalarParm('frame', rootNode, kid)
            _pushScalarParm('fps', rootNode, kid)
            _pushScalarParm('loadmode', rootNode, kid)
            _pushRemapAttributesParm(rootNode, kid)
        WalkAndPush(rootNode, kid)

def GetObjectMenu():
   return ['b', 'b', 'c', 'c']
